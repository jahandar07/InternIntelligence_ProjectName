TASK 1
1.Data Preparation: Clean and Preprocess Historical Data
import pandas as pd
data = pd.read_csv('dataset.csv')  # Adjust with your file name and path
2.data.isnull().sum()  # Check for missing values
data = data.dropna()  # Drop rows with missing values or use .fillna() to fill them
3.data['Date'] = pd.to_datetime(data['Date'])  # Example for date columns
4.from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
data[['column_name']] = scaler.fit_transform(data[['column_name']])
5.Model Selection: Choose Appropriate Machine Learning Models
from statsmodels.tsa.arima.model import ARIMA
model = ARIMA(data['target_column'], order=(1, 1, 1))  # Adjust based on your dataset
model_fit = model.fit()
predictions = model_fit.forecast(steps=10)  # Predict for the next 10 steps
6.from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
X = data[['feature1', 'feature2']]  # Select features
y = data['target']  # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
predictions = model.predict(X_test)
7.Model Training: Train the Model Using Historical Data
model.fit(X_train, y_train)  # for regression models
8.Model Evaluation: Validate Model's Performance
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, predictions)
rmse = mse ** 0.5  # Root Mean Squared Error
print('RMSE:', rmse)
9.from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, predictions)
print("MAE:", mae)
10. Reporting: Document the Modelâ€™s Accuracy and Provide Insights
import matplotlib.pyplot as plt
plt.plot(data['Date'], data['Target'])
plt.plot(data['Date'], predictions)  # For time series comparison
plt.show()




